				________

				 BUNDLE
				________


Table of Contents
_________________

1 NoPanel: multitenant hosting without the bloat
.. 1.1 Sites
..... 1.1.1 Creating Sites
..... 1.1.2 Deleting Sites
..... 1.1.3 Backing Up Sites


1 NoPanel: multitenant hosting without the bloat
================================================

  Sometimes a shared webserver makes sense, but you still want to save
  your sanity. NoPanel is a solution to this need. It provides a minimal
  framework for organizing many Apache docroots on the same server,
  separating user accounts from one another, and performing other basic
  tasks like backups and site setup.

  More important is what NoPanel *doesn't* do:

  - It does not provide a web user interface for administration.
  - It does not require a database for administration.
  - It eschews magic files and other ersatz-databases wherever
    applicable.
  - It doesn't use a 4,000 line Perl script when 8 lines of bash will
    do.

  I use this simple setup on my own servers, and thought it would be
  nice to share it with the community.


1.1 Sites
~~~~~~~~~

  In NoPanel, a "site" is a single domain, a single Apache config file,
  and a single docroot. There is no yaml, json, or other configuration
  file, so in order to keep everything straight, we need to rely on some
  conventions.


1.1.1 Creating Sites
--------------------

  Each site in NoPanel requires a "name", which will be used as the name
  of the Linux system user (and group) that this site uses. Since you
  might be typing this quite often, take a second and think about what
  username you would like to use. While NoPanel technically doesn't
  care, it will be easier for you, a human, if you come up with some
  ration scheme.

  Personally, I use the convention <client descriptor>_<site
  descriptor>. For example, if I were setting up two sites for Frank's
  Pet Shop and they had two domains, one for their public-facing site,
  and the other a private wiki for employees, I might call the two sites
  `franks_main' and `franks_wiki'.

  In any case, the `create_site.sh' script will need to know the name
  you choose, and the domain of the site:

  ,----
  | domain=$1
  | user=$2
  | 
  | if [[ "$domain" == "" ]]; then
  |     echo "No domain provided." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$user" == "" ]]; then
  |     echo "No user provided." 1>&2
  |     exit 1
  | fi
  `----

  The docroot of a site lives in in `/var/www/$domain', and the Apache
  configuration lives in =/etc/-apache2/sites-available/$domain.conf.

  ,----
  | docroot="/var/www/$domain"
  | conf="/etc/apache2/sites-available/$domain.conf"
  | echo -e "I'll try to create a site with domain '$domain' and matching user '$user'.\n"
  `----


  We create the user without a homedir, /with/ a user group of the same
  name, and with no login shell (or more accurately, the login shell set
  to /bin/nologin. This is under the assumption that only you, root,
  will be the only one messing with these files at all. Remember,
  there's no control panel here. In 2018, if a user knows enough to be
  logging into a shell, he can get his own VPS for $12 a year and
  doesn't want to be on your shared server.

  ,----
  | echo -n "Creating new user and user-group..."
  | useradd -M -U -s /bin/nologin "$user"
  | echo "Done!"
  `----

  The Apache config file is created using a template which looks like
  this:

  ,----
  | <VirtualHost *:8080>
  | 	ServerName {domain}
  | 	ServerAlias www.{domain}
  | 
  | 	DocumentRoot /var/www/{domain}
  | 
  | 	LogLevel info
  | 
  | 	ErrorLog /var/log/apache2/{domain}-error.log
  | 	CustomLog /var/log/apache2/{domain}-access.log combined
  | 
  | 	AssignUserId {user} {user}
  | </VirtualHost>
  `----

  Rather than use a complex templating engine, we rely on a few `sed'
  expressions to replace "single-hug" placeholders with their actual
  values.

  ,----
  | conf_file=/etc/apache2/sites-available/$domain.conf
  | echo -n "Creating new apache config '$conf_file'..."
  | {
  |     sed -e "s/{domain}/$domain/g" -e "s/{user}/$user/g" <<CONFTEMPLATE
  | 
  | <VirtualHost *:8080>
  | 	ServerName {domain}
  | 	ServerAlias www.{domain}
  | 
  | 	DocumentRoot /var/www/{domain}
  | 
  | 	LogLevel info
  | 
  | 	ErrorLog /var/log/apache2/{domain}-error.log
  | 	CustomLog /var/log/apache2/{domain}-access.log combined
  | 
  | 	AssignUserId {user} {user}
  | </VirtualHost>
  | 
  | CONFTEMPLATE
  | }>$conf_file
  `----

  Notice that the VirtualHost listens on port 8080, since in my usual
  configuration, Apache is actually sitting behind some kind of
  front-end proxy or load balancer. This isn't always on the same
  machine, but I've standardized on having Apache listen on 8080 even
  when the load-balancer is on a different machine. As with other
  decisions in NoPanel, this one was made to reduce the amount of
  site-specific configuration that is necessary for the types of sites I
  typically deal with.

  As previously mentioned, the DocumentRoot is in `/var/www/$domain'.

  `LogLevel info', as is configured here, is one level above "debug" and
  logs quite a bit. I find this helpful when troubleshooting. With large
  disks, low-traffic sites, and proper log rotation, the volume is
  rarely a problem. To make it easy to find logs relating to a
  particular site, each domain has its own logs.

  Now we're ready to create the docroot itself...

  ,----
  | echo -n "Creating new document in '$docroot'..."
  | mkdir -p "$docroot"
  | echo "Done!"
  `----

  ...and to populate it with a test page:

  ,----
  | echo -n "Creating test page at '$docroot/index.php'..."
  | echo "<?php phpinfo(); ?>" > $docroot/index.php
  | chown -R $user. $docroot
  | echo "Done!"
  `----

  The last thing we need to do is "enable" the site with `a2ensite'
  (which itself just symlinks the config file into
  `/etc/apache/sites-enabled/') and reload the Apache config.

  ,----
  | a2ensite $domain
  | 
  | echo -n "Reloading Apache..."
  | service apache2 reload
  | echo "Done!"
  | 
  | echo "Test site should be available at 'http://$domain' (barring DNS snafus)."
  `----

  Like it says on the time, you should then be able to check out the
  `phpinfo()' page at the proper domain, provided DNS is set up, or you
  have the appropriate entries in your local hosts file.

  Taken together, we have a straightforward Bash function of about
  two-dozen non-blank lines:

  ,----
  | function create_site {
  | domain=$1
  | user=$2
  | 
  | if [[ "$domain" == "" ]]; then
  |     echo "No domain provided." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$user" == "" ]]; then
  |     echo "No user provided." 1>&2
  |     exit 1
  | fi
  | 
  | docroot="/var/www/$domain"
  | conf="/etc/apache2/sites-available/$domain.conf"
  | echo -e "I'll try to create a site with domain '$domain' and matching user '$user'.\n"
  | 
  | echo -n "Creating new user and user-group..."
  | useradd -M -U -s /bin/nologin "$user"
  | echo "Done!"
  | 
  | echo -n "Creating new document in '$docroot'..."
  | mkdir -p "$docroot"
  | echo "Done!"
  | 
  | conf_file=/etc/apache2/sites-available/$domain.conf
  | echo -n "Creating new apache config '$conf_file'..."
  | {
  |     sed -e "s/{domain}/$domain/g" -e "s/{user}/$user/g" <<CONFTEMPLATE
  | 
  | <VirtualHost *:8080>
  | 	ServerName {domain}
  | 	ServerAlias www.{domain}
  | 
  | 	DocumentRoot /var/www/{domain}
  | 
  | 	LogLevel info
  | 
  | 	ErrorLog /var/log/apache2/{domain}-error.log
  | 	CustomLog /var/log/apache2/{domain}-access.log combined
  | 
  | 	AssignUserId {user} {user}
  | </VirtualHost>
  | 
  | CONFTEMPLATE
  | }>$conf_file
  | 
  | echo -n "Creating test page at '$docroot/index.php'..."
  | echo "<?php phpinfo(); ?>" > $docroot/index.php
  | chown -R $user. $docroot
  | echo "Done!"
  | 
  | a2ensite $domain
  | 
  | echo -n "Reloading Apache..."
  | service apache2 reload
  | echo "Done!"
  | 
  | echo "Test site should be available at 'http://$domain' (barring DNS snafus)."
  | }
  `----


1.1.2 Deleting Sites
--------------------

  To delete a site from NoPanel, we need to be absolutely sure that we
  need to know the domain of the site in question, and we need to be
  darn sure that we aren't getting a blank domain and deleting all of
  `/var/www':

  ,----
  | domain="$1"
  | docroot="$(cd "/var/www/$domain"; pwd)"
  | 
  | if [[ "$domain" == "" ]]; then
  |     echo "No domain provided." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -e "$docroot" ]]; then
  |     echo "'$docroot' does not exist." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -d "$docroot" ]]; then
  |     echo "'$docroot' is not a directory." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$docroot" == "/var/www" ]]; then
  |     echo "Not deleting '$docroot'. Please double-check your input." 1>&2
  |     exit 1
  | fi
  `----

  Once we're sure of that, we can determine the Linux user for the site
  in question, and make sure it's a sane one:

  ,----
  | user="$(stat -c "%U" "$docroot")"
  | 
  | if [[ "$user" == "" ]]; then
  |     echo "No user found for site '$domain'." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$user" == "root" ]]; then
  |     echo "Not deleting user '$user'." 1>&2
  |     exit 1
  | fi
  `----

  Next we need to find the config file for the site:

  ,----
  | conf_file="/etc/apache2/sites-available/$domain.conf"
  | 
  | if [[ ! -f "$conf_file" ]]; then
  |     echo "Conf file '$conf_file' does not exist." 1>&2
  |     exit 1
  | fi
  `----

  Finally, we can start doing some damage. First, we disable the site's
  config:

  ,----
  | a2dissite "$domain"
  `----

  Then, we delete the config file itself:
  ,----
  | rm "$conf_file"
  `----

  Remove the document root:
  ,----
  | rm -rfv "$docroot"
  `----

  Finally, we delete the user:
  ,----
  | userdel "$user"
  `----

  ...and reload the Apache config:

  ,----
  | service apache2 reload
  `----

  And that's it! That site won't bother us any more.

  ,----
  | function delete_site {
  | domain="$1"
  | docroot="$(cd "/var/www/$domain"; pwd)"
  | 
  | if [[ "$domain" == "" ]]; then
  |     echo "No domain provided." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -e "$docroot" ]]; then
  |     echo "'$docroot' does not exist." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -d "$docroot" ]]; then
  |     echo "'$docroot' is not a directory." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$docroot" == "/var/www" ]]; then
  |     echo "Not deleting '$docroot'. Please double-check your input." 1>&2
  |     exit 1
  | fi
  | 
  | user="$(stat -c "%U" "$docroot")"
  | 
  | if [[ "$user" == "" ]]; then
  |     echo "No user found for site '$domain'." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$user" == "root" ]]; then
  |     echo "Not deleting user '$user'." 1>&2
  |     exit 1
  | fi
  | 
  | conf_file="/etc/apache2/sites-available/$domain.conf"
  | 
  | if [[ ! -f "$conf_file" ]]; then
  |     echo "Conf file '$conf_file' does not exist." 1>&2
  |     exit 1
  | fi
  | 
  | a2dissite "$domain"
  | rm "$conf_file"
  | rm -rfv "$docroot"
  | userdel "$user"
  | }
  `----


1.1.3 Backing Up Sites
----------------------

  Backing up a site in NoPanel results in a tidy single-file tarball
  that contains the site's files, config, username, and (/Real Soon
  Now/) dumps of its databases.

  As always, we'll first sanity-check our input:

  ,----
  | domain="$1"
  | docroot="$(cd "/var/www/$domain"; pwd)"
  | user="$(stat -c "%U" "$docroot")"
  | 
  | if [[ "$domain" = "" ]]; then
  |     echo "No domain provided." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$user" == "" ]]; then
  |     echo "No user found for site '$domain'." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -e "$docroot" ]]; then
  |     echo "'$docroot' does not exist." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ ! -d "$docroot" ]]; then
  |     echo "'$docroot' is not a directory." 1>&2
  |     exit 1
  | fi
  | 
  | if [[ "$docroot" == "/var/www" ]]; then
  |     echo "Not backing up all of '$docroot'. Please double-check your input." 1>&2
  |     exit 1
  | fi
  `----

  Next, we'll need a temporary directory to work in:

  ,----
  | tmpdir="$(mktemp -d)"
  `----

  Now we can move the files over:
  ,----
  | mkdir -p $tmpdir
  | rsync -aP /var/www/$domain/ $tmpdir/docroot
  | chown -R $user. $tmpdir/docroot
  `----

  ...save the username:

  ,----
  | echo "$user" > $tmpdir/USER
  `----

  ...and tar the whole thing up:

  ,----
  | cd $tmpdir
  | tar -czvf /root/backups/$domain-$(date +%F-%s).tar.gz .
  `----

  Finally, we want to clean up our temporary files:

  ,----
  | rm -rf $tmpdir
  `----

  The finished function:

  ,----
  | "no noweb: yes"body
  `----
